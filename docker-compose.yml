services:
  database:
    image: postgres:16.4
    container_name: database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: films
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      - internal


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - '8080:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - internal

  frontend:
    image: 'ghcr.io/${OWNER}/frontend:latest'
    build:
      context: frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-/api/afisha}
        VITE_CDN_URL: ${VITE_CDN_URL:-/content/afisha}
        VITE_BASE_URL: ${VITE_BASE_URL:-/}
    container_name: frontend
    environment:
      VITE_BASE_URL: ${VITE_BASE_URL:-/}
      VITE_API_URL: ${VITE_API_URL:-/api/afisha}
      VITE_CDN_URL: ${VITE_CDN_URL:-/content/afisha}
    volumes:
      - frontend_build:/app/dist
    networks:
      - internal

  backend:
    image: 'ghcr.io/${OWNER}/backend:latest'
    build: 
      context: backend
    environment:
      PORT: 3000
      DEBUG: '*'
      DATABASE_DRIVER: 'postgres'
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_NAME: films
      DATABASE_USERNAME: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_SYNCHRONIZE: 'false'
      DATABASE_LOGGING: 'false'
    ports:
      - 3000:3000
    networks:
      - internal
    depends_on:
      - database


  server:
    image: 'ghcr.io/${OWNER}/server:latest'
    build: 
      context: nginx
    ports:
      - 80:80
    volumes:
      - frontend_build:/var/www
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - certbot-init
      - frontend
      - backend
    networks:
      - internal

  certbot-init:
    image: certbot/certbot:latest
    container_name: certbot_init
    environment:
      - DOMAIN=${DOMAIN}
      - LE_EMAIL=${LE_EMAIL}
    command: >
      sh -c "if [ ! -e /etc/letsencrypt/live/${DOMAIN}/fullchain.pem ]; then \
        certbot certonly --standalone --non-interactive --agree-tos -m ${LE_EMAIL} -d ${DOMAIN}; \
      else \
        echo 'Certificate for ${DOMAIN} already exists. Skipping issuance.'; \
      fi"
    ports:
      - 80:80
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - internal

  certbot-renew:
    image: certbot/certbot:latest
    container_name: certbot_renew
    environment:
      - DOMAIN=${DOMAIN}
    command: >
      sh -c "while true; do certbot renew --non-interactive || true; sleep 12h; done"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - internal

volumes:
  db_data:
  pgadmin-data:
  frontend_build:

networks:
  internal: